{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/feder/Desktop/Federico/Dev/Angular/Progetti/connect-to-wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { MetamaskHelper } from '../../utils/metamask-helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/metamask-wallet/metamask-wallet.service\";\nexport class HeaderComponent {\n  constructor(metamaskWalletService) {\n    this.metamaskWalletService = metamaskWalletService;\n  }\n  connectToMetamask() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (MetamaskHelper.metamaskInstalled()) {\n        const accountAddress = yield MetamaskHelper.getAccount(0);\n        if (accountAddress) {\n          const balance = yield MetamaskHelper.getAccountBalance(accountAddress);\n          _this.metamaskWalletService.setMetamaskWallet({\n            address: accountAddress,\n            balance: balance\n          });\n        }\n      } else {\n        console.log('Please install MetaMask!');\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function HeaderComponent_Factory(t) {\n    return new (t || HeaderComponent)(i0.ɵɵdirectiveInject(i1.MetamaskWalletService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HeaderComponent,\n    selectors: [[\"app-header\"]],\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"header\", \"p-3\"], [1, \"header-left\"], [1, \"m-0\"], [1, \"header-right\"], [1, \"cursor-pointer\", \"connect-to-wallet-cta\", 3, \"click\"]],\n    template: function HeaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3, \" Connect to Wallet Application \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function HeaderComponent_Template_button_click_5_listener() {\n          return ctx.connectToMetamask();\n        });\n        i0.ɵɵtext(6, \"Connect to Wallet\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\".header[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n.header[_ngcontent-%COMP%]   .connect-to-wallet-cta[_ngcontent-%COMP%] {\\n  outline: none;\\n  border: none;\\n  color: white;\\n  background-color: blueviolet;\\n  padding: 1rem;\\n  font-size: 1.1rem;\\n  font-weight: bold;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxtQkFBQTtBQUNGO0FBQ0U7RUFDRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSw0QkFBQTtFQUNBLGFBQUE7RUFDQSxpQkFBQTtFQUNBLGlCQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuaGVhZGVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAuY29ubmVjdC10by13YWxsZXQtY3RhIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVldmlvbGV0O1xyXG4gICAgcGFkZGluZzogMXJlbTtcclxuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,cAAc,QAAQ,6BAA6B;;;AAS5D,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,qBAA4C;IAA5C,0BAAqB,GAArBA,qBAAqB;EAA0B;EAEtDC,iBAAiB;IAAA;IAAA;MAC5B,IAAIJ,cAAc,CAACK,iBAAiB,EAAE,EAAE;QACtC,MAAMC,cAAc,SAA6BN,cAAc,CAACO,UAAU,CAAC,CAAC,CAAC;QAE7E,IAAID,cAAc,EAAE;UAClB,MAAME,OAAO,SAASR,cAAc,CAACS,iBAAiB,CAACH,cAAc,CAAC;UAEtE,KAAI,CAACH,qBAAqB,CAACO,iBAAiB,CAAC;YAC3CC,OAAO,EAAEL,cAAc;YACvBE,OAAO,EAAEA;WACV,CAAC;;OAEL,MAAM;QACLI,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;IACxC;EACH;EAAC;qBAnBUZ,eAAe;EAAA;EAAA;UAAfA,eAAe;IAAAa;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCV5BC,8BAAwB;QAGlBA,+CACF;QAAAA,iBAAK;QAEPA,8BAA0B;QAC6BA;UAAA,OAASC,uBAAmB;QAAA,EAAC;QAACD,iCAAiB;QAAAA,iBAAS","names":["MetamaskHelper","HeaderComponent","constructor","metamaskWalletService","connectToMetamask","metamaskInstalled","accountAddress","getAccount","balance","getAccountBalance","setMetamaskWallet","address","console","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\feder\\Desktop\\Federico\\Dev\\Angular\\Progetti\\connect-to-wallet\\src\\app\\core\\components\\header\\header.component.ts","C:\\Users\\feder\\Desktop\\Federico\\Dev\\Angular\\Progetti\\connect-to-wallet\\src\\app\\core\\components\\header\\header.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MetamaskHelper } from '../../utils/metamask-helper';\nimport { MetamaskWalletService } from '../../services/metamask-wallet/metamask-wallet.service';\n\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent {\n\n  constructor(private metamaskWalletService: MetamaskWalletService) {}\n\n  public async connectToMetamask(): Promise<void> {\n    if (MetamaskHelper.metamaskInstalled()) {\n      const accountAddress: string | undefined = await MetamaskHelper.getAccount(0);\n\n      if (accountAddress) {\n        const balance = await MetamaskHelper.getAccountBalance(accountAddress);\n\n        this.metamaskWalletService.setMetamaskWallet({\n          address: accountAddress,\n          balance: balance\n        });\n      }\n    } else {\n      console.log('Please install MetaMask!');\n    }\n  }\n\n}\n","<div class=\"header p-3\">\n  <div class=\"header-left\">\n    <h2 class=\"m-0\">\n      Connect to Wallet Application\n    </h2>\n  </div>\n  <div class=\"header-right\">\n    <button class=\"cursor-pointer connect-to-wallet-cta\" (click)=\"connectToMetamask()\">Connect to Wallet</button>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}